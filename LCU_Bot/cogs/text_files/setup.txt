import discord
from discord.ext import commands
from discord.ui import View
from discord import Interaction
from cogs.utils.checks import getInfo, convertInto, checkBlacklisted, log_command, startSetup, channel_select, role_select
from cogs.events import db


class MSessionBanner(discord.ui.Modal, title='Setup'):

    answer = discord.ui.TextInput(label="Session Banner")

    async def on_submit(self, ctx: Interaction):
      await ctx.response.defer(ephemeral=False)
       
      answer = str(self.answer)
      if answer.startswith("https://cdn.discordapp.com/attachments/") or answer.startswith("https://media.discordapp.net/attachments/"):
        await db.setup.update_one({'guild_id': ctx.guild.id}, {'$set': {'session_banner_link': str(self.answer)}})
        self.stop()
        await setup_questions.shutdownBanner(self, ctx) 
      else:
        try:
          await ctx.response.send_message(f"Invalid, it must be from `https://cdn.discordapp.com/attachments/` or `https://media.discordapp.net/attachments/`", ephemeral=True)
        except:
          await ctx.followup.send(f"Invalid, it must be from `https://cdn.discordapp.com/attachments/` or `https://media.discordapp.net/attachments/`", ephemeral=True)

class MShutdownBanner(discord.ui.Modal, title='Setup'):

    answer = discord.ui.TextInput(label="Shutdown Banner", placeholder="")
    async def on_submit(self, ctx: Interaction):
      await ctx.response.defer()
      answer = str(self.answer)
      if answer.startswith("https://cdn.discordapp.com/attachments/") or answer.startswith("https://media.discordapp.net/attachments/"):
        await db.setup.update_one(
            {'guild_id': ctx.guild.id},
            {'$set': {'shutdown_banner_link': str(self.answer)}}
        )
        self.stop()
        await setup_questions.svoteBanner(self, ctx)
      else:
        try:
          await ctx.response.send_message(f"Invalid, it must be from `https://cdn.discordapp.com/attachments/` or `https://media.discordapp.net/attachments/`", ephemeral=True)
        except:
          await ctx.followup.send(f"Invalid, it must be from `https://cdn.discordapp.com/attachments/` or `https://media.discordapp.net/attachments/`", ephemeral=True)

class MSVoteBanner(discord.ui.Modal, title='Setup'):

    answer = discord.ui.TextInput(label="SVote Banner", placeholder="")

    async def on_submit(self, ctx: Interaction):
      await ctx.response.defer()
       
      answer = str(self.answer)
      if answer.startswith("https://cdn.discordapp.com/attachments/") or answer.startswith("https://media.discordapp.net/attachments/"):
        await db.setup.update_one(
            {'guild_id': ctx.guild.id},
            {'$set': {'svote_banner_link': str(self.answer)}}
        )
        self.stop()
        await setup_questions.emoji(self, ctx)
      else:
        try:
          await ctx.response.send_message(f"Invalid, it must be from `https://cdn.discordapp.com/attachments/` or `https://media.discordapp.net/attachments/`", ephemeral=True)
        except:
          await ctx.followup.send(f"Invalid, it must be from `https://cdn.discordapp.com/attachments/` or `https://media.discordapp.net/attachments/`", ephemeral=True)
        
class MEmoji(discord.ui.Modal, title='Setup'):

    answer = discord.ui.TextInput(label="Emoji", placeholder="Must be a custom emoji.")

    async def on_submit(self, ctx: Interaction):
      await ctx.response.defer()
       
      answer = str(self.answer)
      if answer.startswith("<") and answer.endswith(">"):
        await db.setup.update_one(
            {'guild_id': ctx.guild.id},
            {'$set': {'emoji_id': str(self.answer)}}
        )
        self.stop()
        await setup_questions.rolesAndChannels(self, ctx)
      else:
        try:
          await ctx.response.send_message(f"Please retry, it must start with < and end with >. Example: <emojiname:emojiid>", ephemeral=True)
        except:
          await ctx.followup.send(f"Please retry, it must start with < and end with >. Example: <emojiname:emojiid>", ephemeral=True)

class MServerName(discord.ui.Modal, title='Setup'):

    answer = discord.ui.TextInput(label="Server Name")

    async def on_submit(self, ctx: Interaction):
      await ctx.response.defer()
       
      answer = str(self.answer)
      await db.setup.update_one(
            {'guild_id': ctx.guild.id},
            {'$set': {'server_name': str(answer)}}
      )
      self.stop()
      await setup_questions.serverOwner(self, ctx)
      

class MServerOwner(discord.ui.Modal, title='Setup'):

    answer = discord.ui.TextInput(label="Server Owner")

    async def on_submit(self, ctx: Interaction):
      await ctx.response.defer()
       
      answer = str(self.answer)
      
      await db.setup.update_one(
            {'guild_id': ctx.guild.id},
            {'$set': {'server_owner': str(answer)}}
      )
      self.stop()
      await setup_questions.serverCode(self, ctx)
      

class MCode(discord.ui.Modal, title='Setup'):

    answer = discord.ui.TextInput(label="ER:LC Server Code")

    async def on_submit(self, ctx: Interaction):
      await ctx.response.defer()
       
      answer = str(self.answer)
      if " " in answer:
        answer = answer.replace(" ", "") 
      await db.setup.update_one(
            {'guild_id': ctx.guild.id},
            {'$set': {'server_code': str(answer)}}
      )
      await db.settings.update_one(
          {'guild_id': ctx.guild.id},
          {'$set': {'session_link': f"https://policeroleplay.community/join/{str(answer)}"}}
      )
      self.stop()
      await setup_questions.votes(self, ctx)
      

class MReminderText(discord.ui.Modal, title='Setup'):

    answer = discord.ui.TextInput(label="M Command Text", style=discord.TextStyle.paragraph)

    async def on_submit(self, ctx: Interaction):
      await ctx.response.defer()
       
      answer = str(self.answer)
      
      await db.setup.update_one(
            {'guild_id': ctx.guild.id},
            {'$set': {'m_command_text': str(answer)}}
      )
      self.stop()
      await setup_questions.advert(self, ctx)
      

class MVotes(discord.ui.Modal, title='Setup'):

    answer = discord.ui.TextInput(label="Votes", placeholder = "Must be a number")

    async def on_submit(self, ctx: Interaction):
      await ctx.response.defer()
      answer = str(self.answer)
      if answer.isnumeric() != True:
        try:
          return await ctx.followup.send(f"Please provide a number (e.g 1, 2, 3)", ephemeral=True)
        except:
          return await ctx.response.send_message(f"Please provide a number (e.g 1, 2, 3)", ephemeral=True)
      
      await db.setup.update_one(
            {'guild_id': ctx.guild.id},
            {'$set': {'vote_number': str(answer)}}
      )
      self.stop()
      await setup_questions.mText(self, ctx)
      

class MAdvert(discord.ui.Modal, title='Setup'):

    answer = discord.ui.TextInput(label="Advertisement", style=discord.TextStyle.paragraph)

    async def on_submit(self, ctx: Interaction):
      await ctx.response.defer()
       
      answer = str(self.answer)
      
      await db.setup.update_one(
            {'guild_id': ctx.guild.id},
            {'$set': {'advertisement': str(answer)}}
      )
      self.stop()
      await setup_command.complete(self, ctx)

class MNickname(discord.ui.Modal, title='Setup'):
    answer = discord.ui.TextInput(label="LCU's nickname", style=discord.TextStyle.short)

    async def on_submit(self, ctx: Interaction):
      await ctx.response.defer()
      answer = str(self.answer)
      
      try:
        await ctx.guild.me.edit(nick=answer)
        await setup_questions.serverName(self, ctx)
        self.stop()
      except:
        try:
           await ctx.response.send_message(f"Please provide a valid name. It might be too big or has special characters in it.", ephemeral=True)
        except:
           await ctx.followup.send(f"Please provide a valid name. It might be too big or has special characters in it.", ephemeral=True)
        self.stop()
      

#-------------------------------------------------------------------------------------------------------------------
#-----------------------------------------main code-----------------------------------------------------------------

class mainButtons(discord.ui.View):
    def __init__(self, type, user_id):
      super().__init__(timeout=None)
      self.type = type
      self.user_id = user_id
      self.value = None

    @discord.ui.button(label="Input", style=discord.ButtonStyle.green)
    async def input(self, ctx: Interaction, button: discord.ui.Button):
      type = self.type
      if ctx.user.id != self.user_id:
        try:
          return await ctx.response.send_message("You aren't the user who initiated the command!", ephemeral=True)
        except:
          return await ctx.followup.send("You aren't the user who initiated the command!", ephemeral=True)
        
      await ctx.response.send_modal(type)
      

    @discord.ui.button(label="Skip", style=discord.ButtonStyle.blurple)
    async def skip(self, ctx: Interaction, button: discord.ui.Button):
      if ctx.user.id != self.user_id:
        try:
          return await ctx.response.send_message("You aren't the user who initiated the command!", ephemeral=True)
        except:
          return await ctx.followup.send("You aren't the user who initiated the command!", ephemeral=True)
      self.value = "skip"
      self.stop()
      
    @discord.ui.button(label="Cancel", style=discord.ButtonStyle.red)
    async def cancel(self, ctx: Interaction, button: discord.ui.Button):
      if ctx.user.id != self.user_id:
        try:
          return await ctx.response.send_message("You aren't the user who initiated the command!", ephemeral=True)
        except:
          return await ctx.followup.send("You aren't the user who initiated the command!", ephemeral=True)
      em = discord.Embed(title="Canceled!", description="Your setup is canceled", color=discord.Color.red())
      await db.setup.delete_one({'guild_id': ctx.guild.id})
      await db.embeds.delete_one({'guild_id': ctx.guild.id})
      await db.settings.delete_one({'guild_id': ctx.guild.id})
      try:
        await ctx.response.send_message(embed=em)
      except Exception:
        await ctx.followup.send(embed=em)
      self.value = "cancel"
      self.stop()

class setup_questions():
    def __init__(self, bot):
      super().__init__(timeout=None)
      self.bot = bot

    async def sessionBanner(self, ctx: commands.Context):
      await startSetup(ctx)

      em = discord.Embed(title="Session Banner", description="Links have to start with: `https://cdn.discordapp.com/attachments/{id}/{id}` or `https://media.discordapp.com/attachements/{id}/{id}`.")
      view = mainButtons(MSessionBanner(), ctx.author.id)
      msg = await ctx.send(embed=em, view=view)
      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      if view.value == "cancel":
        return False
      elif view.value == "skip":
        return await setup_questions.shutdownBanner(self, ctx)


    async def shutdownBanner(self, ctx: commands.Context):
      em = discord.Embed(title="Shutdown Banner", description="Links have to start with: `https://cdn.discordapp.com/attachments/{id}/{id}` or `https://media.discordapp.com/attachements/{id}/{id}`.")
      try:
        view = mainButtons(MShutdownBanner(), ctx.author.id)
        msg = await ctx.send(embed=em, view=view)
      except:
        view = mainButtons(MShutdownBanner(), ctx.user.id)
        msg = await ctx.followup.send(embed=em, view=view)


      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      if view.value == "cancel":
        
        return False
      elif view.value == "skip":
        await setup_questions.svoteBanner(self, ctx)

    async def svoteBanner(self, ctx: commands.Context):
      em = discord.Embed(title="SVote Banner", description="Links have to start with: `https://cdn.discordapp.com/attachments/{id}/{id}` or `https://media.discordapp.com/attachements/{id}/{id}`.")
      try:
        view = mainButtons(MSVoteBanner(), ctx.author.id)
        msg = await ctx.send(embed=em, view=view)
      except:
        view = mainButtons(MSVoteBanner(), ctx.user.id)
        msg = await ctx.followup.send(embed=em, view=view)


      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      if view.value == "cancel":
        
        return False
      elif view.value == "skip":
        await setup_questions.emoji(self, ctx)

    async def emoji(self, ctx: commands.Context):
      em = discord.Embed(title="Custom Emoji", description="This emoji must be custom to your server.")
      try:
        view = mainButtons(MEmoji(), ctx.author.id)
        msg = await ctx.send(embed=em, view=view)
      except:
        view = mainButtons(MEmoji(), ctx.user.id)
        
        msg = await ctx.followup.send(embed=em, view=view)

      await view.wait()
      try:
        await msg.delete()
      except:
        pass
      
      if view.value == "cancel":
        
        return False
      elif view.value == "skip":
        await setup_questions.rolesAndChannels(self, ctx)

    async def rolesAndChannels(self, ctx):
      em = discord.Embed(title=f"Please select your moderator roles(Do not select your Management roles).", description=f"Can be 1-20 roles.")
      view = await role_select(ctx, 1, 20, "mod_roles_id")
      try:
        msg = await ctx.send(embed=em, view=view)
      except:
        msg = await ctx.followup.send(embed=em, view=view)
      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      em = discord.Embed(title=f"Please select all your staff roles(Do not select your Management roles).", description=f"Can be 1-20 roles.")
      view = await role_select(ctx, 1, 20, "staff_roles_id")
      try:
        msg = await ctx.send(embed=em, view=view)
      except:
        msg = await ctx.followup.send(embed=em, view=view)
      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      em = discord.Embed(title=f"Please select your management roles.", description=f"Can be 1-20 roles.")
      view = await role_select(ctx, 1, 20, "management_roles_id")
      try:
        msg = await ctx.send(embed=em, view=view)
      except:
        msg = await ctx.followup.send(embed=em, view=view)
      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      em = discord.Embed(title=f"Please select your Session/SSU Ping Role", description=f"The role you use to ping for sessions. Choose **1** role.")
      view = await role_select(ctx, 1, 1, "session_role_id")
      try:
        msg = await ctx.send(embed=em, view=view)
      except:
        msg = await ctx.followup.send(embed=em, view=view)
      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      em = discord.Embed(title=f"Please select your on-duty staff role/roles.", description=f"The role used for when a staff member is on shift/duty. Choose **1** role.")
      view = await role_select(ctx, 1, 1, "on_shift_role")
      try:
        msg = await ctx.send(embed=em, view=view)
      except:
        msg = await ctx.followup.send(embed=em, view=view)
      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      em = discord.Embed(title=f"Please select your reminders channel", description=f"This channel will be used when reminders are on.")
      view = await channel_select(ctx, 1, 1, "m_command_channel")
      try:
        msg = await ctx.send(embed=em, view=view)
      except:
        msg = await ctx.followup.send(embed=em, view=view)
      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      em = discord.Embed(title=f"Please provide your staff requests channel", description=f"This channel will be used when a staff request is sent.")
      view = await channel_select(ctx, 1, 1, "ping_channel")
      try:
        msg = await ctx.send(embed=em, view=view)
      except:
        msg = await ctx.followup.send(embed=em, view=view)
      await view.wait()
      try:
        await msg.delete()
      except:
        pass


      await setup_questions.nickname(self, ctx)

    async def nickname(self, ctx: commands.Context):
      em = discord.Embed(title="Bot Nickname", description="This will be LCU's nickname.")
      try:
        view = mainButtons(MNickname(), ctx.author.id)
        msg = await ctx.send(embed=em, view=view)
      except:
        view = mainButtons(MNickname(), ctx.user.id)
        msg = await ctx.followup.send(embed=em, view=view)
      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      if view.value == "cancel":
        return False
      elif view.value == "skip":
        await setup_questions.serverName(self, ctx)

    async def serverName(self, ctx: commands.Context):
      em = discord.Embed(title="Server Name", description="This will be your server's name.")
      try:
        view = mainButtons(MServerName(), ctx.author.id)
        msg = await ctx.send(embed=em, view=view)
      except:
        view = mainButtons(MServerName(), ctx.user.id)
        msg = await ctx.followup.send(embed=em, view=view)
      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      if view.value == "cancel":
        return False
      elif view.value == "skip":
        await setup_questions.serverOwner(self, ctx)

    async def serverOwner(self, ctx: commands.Context):
      em = discord.Embed(title="Server Owner", description="This should be the username or nickname of the server owner.")
      try:
        view = mainButtons(MServerOwner(), ctx.author.id)
        msg = await ctx.send(embed=em, view=view)
      except:
        view = mainButtons(MServerOwner(), ctx.user.id)
        msg = await ctx.followup.send(embed=em, view=view)
      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      if view.value == "cancel":
        return False
      elif view.value == "skip":
        await setup_questions.serverCode(self, ctx)

    async def serverCode(self, ctx: commands.Context):
      em = discord.Embed(title="Server Code", description="This should be your ER:LC Private Server Code.")
      try:
        view = mainButtons(MCode(), ctx.author.id)
        msg = await ctx.send(embed=em, view=view)
      except:
        view = mainButtons(MCode(), ctx.user.id)
        msg = await ctx.followup.send(embed=em, view=view)
      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      if view.value == "cancel":
        return False
      elif view.value == "skip":
        await setup_questions.votes(self, ctx)
    
    async def votes(self, ctx: commands.Context):
      em = discord.Embed(title="Amount of Votes", description="This will be the amount of votes required to continue a SVote.")
      try:
        view = mainButtons(MVotes(), ctx.author.id)
        msg = await ctx.send(embed=em, view=view)
      except:
        view = mainButtons(MVotes(), ctx.user.id)
        msg = await ctx.followup.send(embed=em, view=view)
      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      if view.value == "cancel":
        return False
      elif view.value == "skip":
        await setup_questions.mText(self, ctx)
    
    async def mText(self, ctx: commands.Context):
      em = discord.Embed(title="Reminder Text", description="This will be your ingame server reminder text.") 
      try:
        view = mainButtons(MReminderText(), ctx.author.id)
        msg = await ctx.send(embed=em, view=view)
      except:
        view = mainButtons(MReminderText(), ctx.user.id)
        msg = await ctx.followup.send(embed=em, view=view)
      await view.wait() 
      try:
        await msg.delete()
      except:
        pass

      if view.value == "cancel":
        return False
      elif view.value == "skip":
        await setup_questions.advert(self, ctx)
    
    async def advert(self, ctx: commands.Context):
      em = discord.Embed(title="Advertisement", description="This will be your server's advertisement.")
      try:
        view = mainButtons(MAdvert(), ctx.author.id)
        msg = await ctx.send(embed=em, view=view)
      except:
        view = mainButtons(MAdvert(), ctx.user.id)
        msg = await ctx.followup.send(embed=em, view=view)
      await view.wait()
      try:
        await msg.delete()
      except:
        pass

      if view.value == "cancel":
        return False
      elif view.value == "skip":
        await setup_command.complete(self, ctx)
      

class setup_command(commands.Cog):
  def __init__(self, bot):
    self.bot = bot

  async def setupCheck(ctx: commands.Context):
    if ctx.author.id == 1077718859462754405 or ctx.author.id == 676895030094331915 or ctx.author.id == 688919016722661452:
      return True
    
    if await checkBlacklisted(ctx) == False:
      return await ctx.send("You are blacklisted from LCU. Join our support server to appeal.")
    elif ctx.author.guild_permissions.administrator:
      return True
    else:
      em = discord.Embed(title="Incorrect Permissions", description="You need administrative permissions to run this command!", color=discord.Color.red())
      await ctx.send(embed=em)
      return False
    

  @commands.hybrid_command(description="This will allow you to setup the bot to your liking.", with_app_command = True, extras={"category": "Other"})
  @commands.check(setupCheck)
  async def setup(self, ctx: commands.Context):
    await ctx.defer(ephemeral = False)
    await log_command(ctx, self.bot)
    
    em = discord.Embed(title="", description="**ATTENTION:** Please make sure I have administative permissions and I'm above the roles you will be selecting.", color=discord.Color.green())
    em.set_footer(text='LCU - Setup')
    continueB = discord.ui.Button(label="Continue", style=discord.ButtonStyle.green)
    view=View()
    view.add_item(continueB)
    msg = await ctx.send(embed=em, view=view)
    inter = await self.bot.wait_for('interaction', timeout=None, check=lambda message: message.user == ctx.author and message.channel == ctx.channel)
    try:
      await msg.delete()
    except Exception as e:
      raise commands.MessageNotFound(e)
    is_setup = await setup_questions.sessionBanner(self, ctx)

  async def complete(self, ctx):
    guild_info = await getInfo(ctx)
    em = discord.Embed(title="Success", description="Everything is set-up, these are your options you provided.", color=discord.Color.green())

    em.add_field(name="Session Link", value=f"> {guild_info['session_banner_link']}", inline=False)
    em.add_field(name="Shutdown Link", value=f"> {guild_info['shutdown_banner_link']}", inline=False)
    em.add_field(name="Svote Link", value=f"> {guild_info['svote_banner_link']}", inline=False)
    em.add_field(name="Server Emoji", value=f"> {guild_info['emoji_id']}", inline=False)
    msg = await convertInto(ctx, guild_info['mod_roles_id'])
    em.add_field(name="Moderation Roles", value=f"> {msg}", inline=False)
    msg = await convertInto(ctx, guild_info['staff_roles_id'])
    em.add_field(name="Staff Roles", value=f"> {msg}", inline=False)
    msg = await convertInto(ctx, guild_info['management_roles_id'])
    em.add_field(name="Management Roles", value=f"> {msg}", inline=False)
    em.add_field(name="Session Role", value=f"> <@&{guild_info['session_role_id']}>", inline=False)
    em.add_field(name="On Shift Role", value=f"> <@&{guild_info['on_shift_role']}>", inline=False)
    em.add_field(name="M Command Channel", value=f"> <#{guild_info['m_command_channel']}>", inline=False)
    em.add_field(name="Staff Ping Channel", value=f"> <#{guild_info['ping_channel']}>", inline=False)
    em.add_field(name="ROBLOX Server Name", value=f"> `{guild_info['server_name']}`", inline=False)
    em.add_field(name="ROBLOX Server Owner", value=f"> `{guild_info['server_owner']}`", inline=False)
    em.add_field(name="ROBLOX Code", value=f"> `{guild_info['server_code']}`", inline=False)
    em.add_field(name="Number of Votes", value=f"> `{guild_info['vote_number']}`", inline=False)
    em.add_field(name="M Command Text", value=f"> `{guild_info['m_command_text']}`", inline=False)

    await ctx.followup.send(embed=em)

          

  @setup.error
  async def setup_error(self, ctx: commands.Context, error):
    if isinstance(error, commands.MessageNotFound):
      pass
    elif ctx.guild.me.guild_permissions.administrator is False:
      try:
        return await ctx.send("Please give me Administrator perms as I tend to work better!")
      except:
        pass
    elif ctx.guild.me.guild_permissions.manage_roles is False:
      try:
        return await ctx.send("I need permission to manage roles!")
      except:
        pass
    elif isinstance(error, commands.MissingPermissions):
      try:
        return await ctx.send("I don't have the required permissions!")
      except:
        pass
    
async def setup(bot):
  await bot.add_cog(setup_command(bot)) 